readLines("points.dat")
strsplit(readLines("points.dat"), " ")
strsplit(readLines("points.dat"), " ")[[1]]
coords = strsplit(readLines("points.dat"), " ")[[1]]
str(coords)
class(coords)
typeof(coords)
lapply(coords, strsplit, " ")
lapply(coords, strsplit, "/")
coords = strsplit(readLines("points.dat"), ", ")[[1]]
lapply(coords, strsplit, "/")
as.data.frame(lapply(coords, strsplit, "/"))
emframe(coords)
library(tidyverse)
library(sqldf)
library(plotrix)
emframe(coords)
enframe(coords)
enframe(coords) %>% separate(value, into = c("x", "y"), sep = "/")
enframe(coords) %>% separate(value, into = c("x", "y"), sep = "/") %>% mutate(x = as.numeric(x), y = as.numeric(y))
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
View(data)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
View(P)
filename = "points.dat"
coords = strsplit(readLines(filename), " ")[[1]]
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
View(P)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
P1 <- new("partition",id=1, x=2.5, y=7.5, width=2.5)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
P1$x
P1@x
contains <- function(P, x, y){
return(P@x - P@width <= x && P@x + P@width <= x && P@y - P@width <= y && P@y + P@width <= y)
}
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
contains(P1, 6,1)
contains(P1, 6, 1)
contains(P1, 1, 6)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
contains(P1, 6, 1)
contains(P1, 1, 6)
contains(P1, 5, 5)
contains <- function(P, x, y){
Xmin = P@x - P@width
Xmax = P@x + P@width
Ymin = P@y - P@width
Ymax = P@y + P@width
return( Xmin <= x && x <= Xmax &&  Ymin <= y && y <= Ymax)
}
contains(P1, 5, 5)
contains(P2, 5, 5)
contains(P4, 5, 5)
contains(P7, 5, 5)
contains(P3, 5, 5)
contains(P5, 5, 5)
contains(P6, 5, 5)
points
P
P %>% filter(contains(P1, x, y))
P %>% filter(contains(P2, x, y))
P %>% filter(contains(P3, x, y))
P %>% filter(contains(P4, x, y))
P %>% filter(contains(P5, x, y))
P %>% filter(contains(P6, x, y))
P %>% map(contains, P1, x, y)
P %>% map(function(x, y) x + y)
P %>% map(function(x) x$x + x$y)
P %>% map(function(x) x)
P %>% map(function(x) x$x)
P %>% map(function(p) p$x)
P %>% map(function(p) p@x)
P %>% map(function(p) p[1])
P %>% map(function(p) p[[1]])
P %>% map(function(p) p[1]$x)
P %>% map(function(p) p[[1]]$x)
P %>% map(function(p) p$x)
P %>% map(function(p) p.x)
P %>% pmap_dfr(function(...) { current = tibble(...) })
P %>% pmap_dfr(function(...) { current = tibble(...)
print(current$x)
})
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
View(points1)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
View(pointsAndPartitions)
pointsAndPartitions %>% filter(4 < x && x < 6)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
View(pointsAndPartitions)
pointsAndPartitions %>% filter(4 < x && x < 6)
?filter
pointsAndPartitions %>% filter(x > 5)
pointsAndPartitions %>% filter(x > 5 & x < 6)
pointsAndPartitions %>% filter(x > 5 && x < 6)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
pointsAndPartitions %>% filter(x > 5 & x < 6)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
pointsAndPartitions %>% filter(x > 5 & x < 6)
pointsAndPartitions %>% filter(x > 4 & x < 6)
pointsAndPartitions %>% filter(x > 4 & x < 6 & y > 4 & y < 6)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
View(pap)
pap
pap %>% pivot_longer(!x, names_to = "part", values_to = "isin")
pap %>% pivot_longer(!x, cols = starts_with("P")names_to = "part", values_to = "isin")
pap %>% pivot_longer(!x, cols = starts_with("P"), names_to = "part", values_to = "isin")
pap %>% pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin")
pap %>% pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>% filter(isin)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
View(points)
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord)
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord) %>%
group_by(part) %>% summarize(coords = paste(sort(unique(coord)),collapse=", "))
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord) %>%
group_by(part) %>% summarize(coords = paste(sort(unique(coord)),collapse=", ")) %>%
mutate(line = paste0("\t\\newcommand{\\",part,"}{",coords,"}\n"))
?write_lines
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord) %>%
group_by(part) %>% summarize(coords = paste(sort(unique(coord)),collapse=", ")) %>%
mutate(lines = paste0("\t\\newcommand{\\",part,"}{",coords,"}")) %>%
select(lines) %>% write_line("Ps.txt")
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord) %>%
group_by(part) %>% summarize(coords = paste(sort(unique(coord)),collapse=", ")) %>%
mutate(lines = paste0("\t\\newcommand{\\",part,"}{",coords,"}")) %>%
select(lines) %>% write_lines("Ps.txt")
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord) %>%
group_by(part) %>% summarize(coords = paste(sort(unique(coord)),collapse=", ")) %>%
mutate(lines = paste0("\t\\newcommand{\\",part,"}{",coords,"}"))
write_delim(points %>% select(lines), path = "Ps.txt")
write_delim(points %>% select(lines), path = "Ps.txt", col_names = F, quote_escape = F)
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord) %>%
group_by(part) %>% summarize(coords = paste(sort(unique(coord)),collapse=", ")) %>%
mutate(lines = paste0("\t\\newcommand{\\",part,"}{",coords,"}"))
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord) %>%
group_by(part) %>% summarize(coords = paste(sort(unique(coord)),collapse=", ")) %>%
mutate(lines = paste0("\t\\newcommand{\\",part,"}{",coords,"}"))
write_delim(points %>% select(lines), path = "Ps.txt", col_names = F, quote_escape = "none")
points = pap %>%
pivot_longer(cols = starts_with("P"), names_to = "part", values_to = "isin") %>%
filter(isin) %>% mutate(coord = paste0(x,"/",y)) %>% select(part, coord) %>%
group_by(part) %>% summarize(coords = paste(sort(unique(coord)),collapse=", ")) %>%
mutate(lines = paste0("\t\\newcommand{\\",part,"}{",coords,"}"))
write.table(points %>% select(lines), file = "Ps.txt", row.names = F, col.names = F, quote = F)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_replicator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
centers
plot(centers)
drawDisks(centers)
dev.off()
plot(centers)
drawDisks(centers)
drawCanvas()
drawPoints()
drawCenters()
centers = drawCenters()
disks = drawCenters2(centers)
drawDisks(disks)
mu
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
centers
pointset2
View(centers)
View(pointset2)
View(pointset)
data = sqldf("SELECT p1.x AS x1, p1.y AS y1, p2.x AS x2, p2.y AS y2 FROM centers p1 CROSS JOIN pointset p2 ")
data
disks0 = data.frame(center=character(), point=character(), stringsAsFactors=FALSE)
for(i in 1:nrow(data)){
x1 = data[i,1]
y1 = data[i,2]
x2 = data[i,3]
y2 = data[i,4]
d = distance(x1,y1,x2,y2)
if(d <= epsilon/2 && d != 0){
disks0[nrow(disks0) + 1, ] = list(paste(x1, y1), paste(x2, y2))
}
}
View(disks0)
as_tibble(disks0)
as_tibble(disks0) %>% group_by(center)
as_tibble(disks0) %>% group_by(center) %>% tally()
as_tibble(disks0) %>% group_by(center) %>% tally() %>% filter(n >= mu)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
r
epsilon
epsilon / 2
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
data = sqldf("SELECT p1.x AS x1, p1.y AS y1, p2.x AS x2, p2.y AS y2 FROM centers p1 CROSS JOIN pointset p2 ")
disks0 = data.frame(center=character(), point=character(), stringsAsFactors=FALSE)
r = epsilon / 2.0
for(i in 1:nrow(data)){
x1 = data[i,1]
y1 = data[i,2]
x2 = data[i,3]
y2 = data[i,4]
d = distance(x1,y1,x2,y2)
if(d <= r && d != 0){
disks0[nrow(disks0) + 1, ] = list(paste(x1, y1), paste(x2, y2), d)
}
}
warnings()
data = sqldf("SELECT p1.x AS x1, p1.y AS y1, p2.x AS x2, p2.y AS y2 FROM centers p1 CROSS JOIN pointset p2 ")
disks0 = data.frame(center=character(), point=character(), d=numeric(), stringsAsFactors=FALSE)
r = epsilon / 2.0
for(i in 1:nrow(data)){
x1 = data[i,1]
y1 = data[i,2]
x2 = data[i,3]
y2 = data[i,4]
d = distance(x1,y1,x2,y2)
if(d <= r && d != 0){
disks0[nrow(disks0) + 1, ] = list(paste(x1, y1), paste(x2, y2), d)
}
}
View(disks0)
as_tibble(disks0) %>% group_by(center) %>% tally()
ddd = as_tibble(disks0) %>% group_by(center) %>% tally()
plot(ddd)
dev.off()
plot(ddd)
ddd
plot(ddd %>% separate(center, c("x","y"), " ") %>% mutate(x=as.numeric(x),y=as.numeric(y)))
plot(ddd %>% separate(center, c("x","y"), " ") %>% mutate(x=as.numeric(x),y=as.numeric(y)) %>% select(x,y))
plot(1, asp=1, axes = F, , xlab = "", ylab = "", type='n', xlim=lim, ylim=lim)
points(1, asp=1, axes = F, , xlab = "", ylab = "", type='n', xlim=lim, ylim=lim)
ppp = ddd %>% separate(center, c("x","y"), " ") %>% mutate(x=as.numeric(x),y=as.numeric(y)) %>% select(x,y)
ddd
ddd %>% separate(center, c("x","y"), " ") %>% mutate(x=as.numeric(x),y=as.numeric(y)) %>% select(x,y)
ppp = ddd %>% separate(center, c("x","y"), " ") %>% mutate(x=as.numeric(x),y=as.numeric(y)) %>% select(x,y)
ppp = as.data.frame(ppp)
plot(ppp)
drawCanvas()
plot(1, asp=1, axes = F, , xlab = "", ylab = "", type='n', xlim=lim, ylim=lim)
points(ppp)
ppp$x < 5
ppp[ppp$x < 5 & ppp$y < 5 , ]
s = ppp[ppp$x < 5 & ppp$y < 5 , ]
points(s, col=2)
sqldf("SELECT p1.x AS x1, p1.y AS y1, p2.x AS x2, p2.y AS y2 FROM centers p1 CROSS JOIN pointset p2 ")
c = sqldf("SELECT p1.x AS x1, p1.y AS y1, p2.x AS x2, p2.y AS y2 FROM centers p1 CROSS JOIN pointset p2 ")
as_tibble(c)
as_tibble(c) %>% filter(x1 == 4.47)
as_tibble(c) %>% filter(x1 = 4.47)
as_tibble(c) %>% filter(x1 <= 4.47)
as_tibble(c) %>% filter(x1 <= 4.48 & y1 <= 4.73)
data = as_tibble(c) %>% filter(x1 <= 4.48 & y1 <= 4.73)
disks0 = data.frame(center=character(), point=character(), d=numeric(), stringsAsFactors=FALSE)
r = epsilon / 2.0
for(i in 1:nrow(data)){
x1 = data[i,1]
y1 = data[i,2]
x2 = data[i,3]
y2 = data[i,4]
d = distance(x1,y1,x2,y2)
if(d <= r && d != 0){
disks0[nrow(disks0) + 1, ] = list(paste(x1, y1), paste(x2, y2), d)
}
}
disks0
as_tibble(disks0)
for(i in 1:nrow(data)){
x1 = data[i,1]
y1 = data[i,2]
x2 = data[i,3]
y2 = data[i,4]
d = distance(x1,y1,x2,y2)
if(d <= r && d != 0){
disks0[nrow(disks0) + 1, ] = list(paste(x1, y1), paste(x2, y2))
}
}
as_tibble(disks0)
data = as_tibble(c) %>% filter(x1 <= 4.48 & y1 <= 4.73)
data
for(i in 1:nrow(data)){
x1 = data[i,1]
y1 = data[i,2]
x2 = data[i,3]
y2 = data[i,4]
d = distance(x1,y1,x2,y2)
if(d <= r && d != 0){
disks0[nrow(disks0) + 1, ] = list(paste(x1, y1), paste(x2, y2))
}
}
data0
disks0
disks0 = data.frame(center=character(), point=character(), d=numeric(), stringsAsFactors=FALSE)
for(i in 1:nrow(data)){
x1 = data[i,1]
y1 = data[i,2]
x2 = data[i,3]
y2 = data[i,4]
d = distance(x1,y1,x2,y2)
if(d <= r && d != 0){
disks0[nrow(disks0) + 1, ] = list(paste(x1, y1), paste(x2, y2), d)
}
}
disks0
disks0 = data.frame(center=character(), point=character(), stringsAsFactors=FALSE)
r = epsilon / 2.0
for(i in 1:nrow(data)){
x1 = data[i,1]
y1 = data[i,2]
x2 = data[i,3]
y2 = data[i,4]
d = distance(x1,y1,x2,y2)
if(d <= r && d != 0){
disks0[nrow(disks0) + 1, ] = list(paste(x1, y1), paste(x2, y2))
}
}
disks0
as_tibble(disks0) %>% distinct()
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
source('~/Documents/PFlocks/Methods/figures/MF_stages/MF_generator.R', echo=TRUE)
